[program:{{ project_name }}]
command=/usr/local/bin/django_start                                            ; Command to start app
user={{ user }}                                                                 ; User to run as
stdout_logfile=/var/log/{{ project_name }}/{{ project_name }}.log               ; Where to write log messages
redirect_stderr=true                                                            ; Save stderr in the same log
stopasgroup=true
stopsignal=QUIT
stopwaitsecs=30
autostart=true
autorestart=true
environment=LANG=en_US.UTF-8,LC_ALL=en_US.UTF-8                                   ; Set UTF-8 as default encoding


[program:{{ project_name }}-websocket]
socket={{ web_socket }}
command=/usr/local/bin/django_websocket_start                                  ; Command to start app
user={{ user }}                                                                 ; User to run as
stdout_logfile=/var/log/{{ project_name }}/websocket_django.log                ; Where to write log messages
redirect_stderr=true                                                            ; Save stderr in the same log
stopasgroup=true
# Number of processes to startup, roughly the number of CPUs you have
numprocs=1
# Give each process a unique name so they can be told apart
process_name=asgi%(process_num)d
stopsignal=QUIT
stopwaitsecs=30
autostart=true
autorestart=true
redirect_stderr=true
environment=LANG=en_US.UTF-8,LC_ALL=en_US.UTF-8

[program:airflow]
# command={{ path_venv }}/bin/airflow webserver
command=airflow-server
stopsignal=QUIT
stopasgroup=true
user=root
stdout_logfile=/var/log/airflow/airflow-stdout.log
stderr_logfile=/var/log/airflow/airflow-stderr.log
environment=HOME="/usr/local/airflow",AIRFLOW_HOME="/usr/local/airflow",TMPDIR="/storage/airflow_tmp",PATH="{{ path_venv }}/bin/airflow:%(ENV_PATH)s"

[program:airflow-scheduler]
# command={{ path_venv }}/bin/airflow scheduler -p
command=airflow-scheduler
stopsignal=QUIT
stopasgroup=true
killasgroup=true
user=root
stdout_logfile=/var/log/airflow/airflow-scheduler-stdout.log
stderr_logfile=/var/log/airflow/airflow-scheduler-stderr.log
environment=HOME="/usr/local/airflow",AIRFLOW_HOME="/usr/local/airflow",TMPDIR="/storage/airflow_tmp",PATH="{{ path_venv }}/bin/airflow:%(ENV_PATH)s"
autorestart=true


{% for queue in queue_names %}

[program:queue-{{ queue }}]
# command={{ path_venv }}/bin/airflow worker -q airflow-queue-{{ queue }}
command=airflow-queue-{{ queue }}
stopsignal=QUIT
stopasgroup=true
killasgroup=true
user=root
startsecs=0
stdout_logfile=/var/log/airflow/airflow-scheduler-queue-{{ queue }}.log
stderr_logfile=/var/log/airflow/airflow-scheduler-queue-{{ queue }}.log
environment=HOME="/usr/local/airflow",AIRFLOW_HOME="/usr/local/airflow",TMPDIR="/storage/airflow_tmp",PATH="{{ path_venv }}/bin/airflow:%(ENV_PATH)s"
autorestart=true

{% endfor %}

[program:flower]
# command={{ path_venv }}/bin/airflow flower
command=airflow-flower
stopsignal=QUIT
stopasgroup=true
killasgroup=true
user=root
stdout_logfile=/var/log/airflow/airflow-flower.log
stderr_logfile=/var/log/airflow/airflow-flower.log
environment=HOME="/usr/local/airflow",AIRFLOW_HOME="/usr/local/airflow",TMPDIR="/storage/airflow_tmp",PATH="{{ path_venv }}/bin/airflow:%(ENV_PATH)s"
autorestart=true

[program:airflow-worker]
# command={{ path_venv }}/bin/airflow worker -q airflow-worker
command=airflow-worker
stopsignal=QUIT
stopasgroup=true
killasgroup=true
user=root
startsecs=0
stdout_logfile=/var/log/airflow/airflow-worker.log
stderr_logfile=/var/log/airflow/airflow-worker.log
environment=HOME="/usr/local/airflow",AIRFLOW_HOME="/usr/local/airflow",TMPDIR="/storage/airflow_tmp",PATH="{{ path_venv }}/bin/airflow:%(ENV_PATH)s"
autorestart=true
